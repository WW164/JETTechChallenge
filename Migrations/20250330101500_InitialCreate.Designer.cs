// <auto-generated />
using AccountService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountService.Migrations
{
    [DbContext(typeof(AccountDbContext))]
    [Migration("20250330101500_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AccountService.Repositories.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmailAddress = "bart.simpson@doh.net",
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            EmailAddress = "homer.simpson@doh.net",
                            UserId = 5
                        },
                        new
                        {
                            Id = 3,
                            EmailAddress = "charles_m_burns@fission.com",
                            UserId = 6
                        });
                });

            modelBuilder.Entity("AccountService.Repositories.Addresses", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            UserId = 5
                        },
                        new
                        {
                            UserId = 6
                        });
                });

            modelBuilder.Entity("AccountService.Repositories.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Age = 10,
                            FirstName = "Bart",
                            LastName = "Simpson"
                        },
                        new
                        {
                            Id = 5,
                            Age = 34,
                            FirstName = "Homer",
                            LastName = "Simpson"
                        },
                        new
                        {
                            Id = 6,
                            Age = 81,
                            FirstName = "Charles",
                            LastName = "Burns"
                        });
                });

            modelBuilder.Entity("AccountService.Repositories.Addresses", b =>
                {
                    b.HasOne("AccountService.Repositories.User", null)
                        .WithOne()
                        .HasForeignKey("AccountService.Repositories.Addresses", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AccountService.Repositories.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<int>("AddressesUserId")
                                .HasColumnType("int");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("BillingCountry");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("BillingStreet");

                            b1.Property<string>("Town")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("BillingTown");

                            b1.HasKey("AddressesUserId");

                            b1.ToTable("Addresses");

                            b1.WithOwner()
                                .HasForeignKey("AddressesUserId");

                            b1.HasData(
                                new
                                {
                                    AddressesUserId = 5,
                                    Country = "USA",
                                    Street = "1000 Mammon Lane",
                                    Town = "Springfield"
                                },
                                new
                                {
                                    AddressesUserId = 6,
                                    Country = "USA",
                                    Street = "1000 Mammon Lane",
                                    Town = "Springfield"
                                });
                        });

                    b.OwnsOne("AccountService.Repositories.Address", "ShippingAddress", b1 =>
                        {
                            b1.Property<int>("AddressesUserId")
                                .HasColumnType("int");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ShippingCountry");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ShippingStreet");

                            b1.Property<string>("Town")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ShippingTown");

                            b1.HasKey("AddressesUserId");

                            b1.ToTable("Addresses");

                            b1.WithOwner()
                                .HasForeignKey("AddressesUserId");

                            b1.HasData(
                                new
                                {
                                    AddressesUserId = 5,
                                    Country = "USA",
                                    Street = "742 Evergreen Terrace",
                                    Town = "Springfield"
                                },
                                new
                                {
                                    AddressesUserId = 6,
                                    Country = "USA",
                                    Street = "Springfield Power Plant",
                                    Town = "Springfield"
                                });
                        });

                    b.Navigation("BillingAddress");

                    b.Navigation("ShippingAddress");
                });
#pragma warning restore 612, 618
        }
    }
}
